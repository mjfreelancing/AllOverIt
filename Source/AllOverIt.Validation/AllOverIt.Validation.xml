<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllOverIt.Validation</name>
    </assembly>
    <members>
        <member name="T:AllOverIt.Validation.Extensions.RuleBuilderExtensions">
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilder`2"/>.</summary>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsExclusiveBetween``2(FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the exclusive range.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="from">The lower limit of the exclusive range.</param>
            <param name="to">The higher limit of the exclusive range.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsExclusiveBetween``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the specified range.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="from">The lower limit of the exclusive range.</param>
            <param name="to">The higher limit of the exclusive range.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsExclusiveBetween``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the exclusive range provided
            by resolvers that have access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="fromValueResolver">The resolver that provides the lower exclusive limit.</param>
            <param name="toValueResolver">The resolver that provides the upper exclusive limit.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsExclusiveBetween``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the exclusive range provided
            by resolvers that have access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="fromValueResolver">The resolver that provides the lower exclusive limit.</param>
            <param name="toValueResolver">The resolver that provides the upper exclusive limit.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThan``2(FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThan``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThan``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThan``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThanOrEqualTo``2(FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than or equal to a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThanOrEqualTo``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than or equal to a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThanOrEqualTo``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than or equal to the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsGreaterThanOrEqualTo``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is greater than or equal to the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsInclusiveBetween``2(FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the inclusive range.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="from">The lower limit of the inclusive range.</param>
            <param name="to">The higher limit of the inclusive range.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsInclusiveBetween``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the inclusive range.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="from">The lower limit of the inclusive range.</param>
            <param name="to">The higher limit of the inclusive range.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsInclusiveBetween``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the inclusive range provided
            by resolvers that have access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="fromValueResolver">The resolver that provides the lower inclusive limit.</param>
            <param name="toValueResolver">The resolver that provides the upper inclusive limit.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsInclusiveBetween``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is outside the inclusive range provided
            by resolvers that have access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="fromValueResolver">The resolver that provides the lower inclusive limit.</param>
            <param name="toValueResolver">The resolver that provides the upper inclusive limit.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThan``2(FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThan``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThan``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThan``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThanOrEqualTo``2(FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than or equal to a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThanOrEqualTo``2(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than or equal to a specified value.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="comparison">The value to compare the property value with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThanOrEqualTo``3(FluentValidation.IRuleBuilder{``0,``1},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than or equal to the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsLessThanOrEqualTo``3(FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Func{``2,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is less than or equal to the value provided
            by a resolver that has access to the root context data.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="valueResolver">The resolver that provides the value to be compared with.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsNotEmpty``2(FluentValidation.IRuleBuilder{``0,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is null, an empty string, whitespace,
            an empty collection or the default value of the type.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderExtensions.IsRequired``2(FluentValidation.IRuleBuilder{``0,``1})">
            <summary>Defines a validator on the current rule builder that will fail if the value of the property is null, an empty string, whitespace,
            an empty collection or the default value of the type.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
        </member>
        <member name="T:AllOverIt.Validation.Extensions.RuleBuilderOptionsExtensions">
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IRuleBuilderOptions`2"/>.</summary>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.RuleBuilderOptionsExtensions.WithErrorCode``2(FluentValidation.IRuleBuilderOptions{``0,``1},AllOverIt.Validation.ValidationErrorCode)">
            <summary>Specifies a custom error code based on a <see cref="T:AllOverIt.Validation.ValidationErrorCode"/>.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="errorCode"></param>
        </member>
        <member name="T:AllOverIt.Validation.Extensions.ValidationContextExtensions">
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.ValidationContext`1"/>.</summary>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.ValidationContextExtensions.SetContextData``2(FluentValidation.ValidationContext{``0},``1,System.String)">
            <summary>Sets additional data associated with the validation request.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TContext">The context data type.</typeparam>
            <param name="context">The validation context to set the additional data on.</param>
            <param name="data">The additional data to add to the validation context.</param>
            <param name="key">The key associated with the data. The default key is "data".</param>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.ValidationContextExtensions.GetContextData``2(FluentValidation.ValidationContext{``0},System.String)">
            <summary>Gets additional data associated with the validation request.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TContext">The context data type.</typeparam>
            <param name="context">The validation context to get the additional data from.</param>
            <param name="key">The key associated with the data. The default key is "data".</param>
            <returns>The context data associated with the key on the validation context.</returns>
        </member>
        <member name="T:AllOverIt.Validation.Extensions.ValidatorExtensions">
            <summary>Provides a variety of extension methods for <see cref="T:FluentValidation.IValidator`1"/>.</summary>
        </member>
        <member name="M:AllOverIt.Validation.Extensions.ValidatorExtensions.ValidateAndThrow``2(FluentValidation.IValidator{``0},``0,``1)">
            <summary>Adds custom context data to the validation request and validates the specified model instance. If the validation
            fails then an exception is thrown.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TContext">The context data type.</typeparam>
            <param name="validator">The validator instance.</param>
            <param name="instance">The model instance to validate.</param>
            <param name="context">The context to associate with the validation request.</param>
        </member>
        <member name="T:AllOverIt.Validation.IValidationInvoker">
            <summary>Represents a validation invoker.</summary>
        </member>
        <member name="M:AllOverIt.Validation.IValidationInvoker.Validate``1(``0)">
            <summary>Validates a model instance.</summary>
            <typeparam name="TType">The model type.</typeparam>
            <param name="instance">The model instance.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:AllOverIt.Validation.IValidationInvoker.Validate``2(``0,``1)">
            <summary>Validates a model instance. Additional context data is associated with the request that can be utilized in the validation rules.</summary>
            <typeparam name="TType">The model type.</typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="instance">The model instance.</param>
            <param name="context">The context type.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:AllOverIt.Validation.IValidationInvoker.AssertValidation``1(``0)">
            <summary>Validates a model instance. If the validation fails then a validation exception is thrown.</summary>
            <typeparam name="TType">The model type.</typeparam>
            <param name="instance">The model instance.</param>
        </member>
        <member name="M:AllOverIt.Validation.IValidationInvoker.AssertValidation``2(``0,``1)">
            <summary>Validates a model instance. If the validation fails then a validation exception is thrown.</summary>
            <typeparam name="TType">The model type.</typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="instance">The model instance.</param>
            <param name="context">The context type.</param>
        </member>
        <member name="T:AllOverIt.Validation.IValidationRegistry">
            <summary>Represents a registry of model types and their associated validators.</summary>
        </member>
        <member name="M:AllOverIt.Validation.IValidationRegistry.Register``2">
            <summary>Registers a model type with an associated validator.</summary>
            <typeparam name="TType">The model type.</typeparam>
            <typeparam name="TValidator">The validator type.</typeparam>
            <returns>The registry, allowing for a fluent syntax.</returns>
        </member>
        <member name="T:AllOverIt.Validation.ValidationErrorCode">
            <summary>Custom error codes that are used with the provided built-in rule extensions.</summary>
        </member>
        <member name="F:AllOverIt.Validation.ValidationErrorCode.Required">
            <summary>The property value is required. Validation fails if the property value is null, an empty string, whitespace,
            an empty collection or the default value of the type.</summary>
            <remarks>The meaning of this error code is the same as <see cref="F:AllOverIt.Validation.ValidationErrorCode.NotEmpty"/> but the code and reported message more clearly
            indicates the reason for the failure.</remarks>
        </member>
        <member name="F:AllOverIt.Validation.ValidationErrorCode.NotEmpty">
            <summary>The property value cannot be empty. Validation fails if the property value is null, an empty string, whitespace,
            an empty collection or the default value of the type.</summary>
            <remarks>The meaning of this error code is the same as <see cref="F:AllOverIt.Validation.ValidationErrorCode.Required"/> but the code and reported message more clearly
            indicates the reason for the failure.</remarks>
        </member>
        <member name="F:AllOverIt.Validation.ValidationErrorCode.OutOfRange">
            <summary>The property value is out of range.</summary>
        </member>
        <member name="T:AllOverIt.Validation.ValidationInvoker">
            <summary>A validation invoker that utilizes a registry to determine which validator to invoke based on the model type.</summary>
        </member>
        <member name="M:AllOverIt.Validation.ValidationInvoker.Register``2">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.ValidationInvoker.Validate``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.ValidationInvoker.Validate``2(``0,``1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.ValidationInvoker.AssertValidation``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.ValidationInvoker.AssertValidation``2(``0,``1)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.ValidatorBase`1">
            <summary>A base validator that adds support for validating rules against custom context data.</summary>
            <typeparam name="TType">The model type being validated.</typeparam>
        </member>
        <member name="M:AllOverIt.Validation.ValidatorBase`1.DisablePropertyNameSplitting">
            <summary>Prevents Pascal property name splitting.</summary>
        </member>
        <member name="M:AllOverIt.Validation.ValidatorBase`1.Validate``1(`0,``0)">
            <summary>Validates a model instance. Additional context data is associated with the request that
            can be utilized in the validation rules.</summary>
            <typeparam name="TContext"></typeparam>
            <param name="instance">The model instance.</param>
            <param name="context">The context type.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:AllOverIt.Validation.Validators.ContextComparisonValidator`3">
            <summary>A base validation class that obtains the comparison context for use by a rule at the time of invocation.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextComparisonValidator`3.#ctor(System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="valueResolver">The resolver to obtain the comparison value from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextComparisonValidator`3.IsValid(FluentValidation.ValidationContext{`0},`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextComparisonValidator`3.IsValid(`1,`1)">
            <summary>Override in a concrete validator to indicate if the property value is valid compared to the specified comparison value.</summary>
            <param name="value">The property value.</param>
            <param name="comparisonValue">The value to compare to the property value.</param>
            <returns>True if the property value is valid, otherwise false.</returns>
        </member>
        <member name="T:AllOverIt.Validation.Validators.ContextRangeValidator`3">
            <summary>A base validation class that is used to validate a property value against two values available on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextRangeValidator`3.#ctor(System.Func{`2,`1},System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="fromValueResolver">The resolver to obtain the lower limit from the validation context.</param>
            <param name="toValueResolver">The resolver to obtain the upper limit from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextRangeValidator`3.IsValid(FluentValidation.ValidationContext{`0},`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.ContextRangeValidator`3.IsValid(`1,`1,`1)">
            <summary>Override in a concrete validator to indicate if the property value is valid compared to the two specified values.</summary>
            <param name="value">The property value.</param>
            <param name="fromValue">The lower limit value to compare to the property value.</param>
            <param name="toValue">The upper limit value to compare to the property value.</param>
            <returns>True if the property value is valid, otherwise false.</returns>
        </member>
        <member name="T:AllOverIt.Validation.Validators.ExclusiveBetweenContextValidator`3">
            <summary>A range validator that compares a property value against an exclusive upper and lower limit stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.ExclusiveBetweenContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.ExclusiveBetweenContextValidator`3.#ctor(System.Func{`2,`1},System.Func{`2,`1})">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.ExclusiveBetweenContextValidator`3.IsValid(`1,`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.ExclusiveBetweenContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.Validators.GreaterThanContextValidator`3">
            <summary>A validator that determines if a property value is greater than a comparison value stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.GreaterThanContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanContextValidator`3.#ctor(System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="valueResolver">The resolver to obtain the comparison value from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanContextValidator`3.IsValid(`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.Validators.GreaterThanOrEqualToContextValidator`3">
            <summary>A validator that determines if a property value is greater than or equal to a comparison value stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.GreaterThanOrEqualToContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanOrEqualToContextValidator`3.#ctor(System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="valueResolver">The resolver to obtain the comparison value from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanOrEqualToContextValidator`3.IsValid(`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.GreaterThanOrEqualToContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.Validators.InclusiveBetweenContextValidator`3">
            <summary>A range validator that compares a property value against an inclusive upper and lower limit stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.InclusiveBetweenContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.InclusiveBetweenContextValidator`3.#ctor(System.Func{`2,`1},System.Func{`2,`1})">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.InclusiveBetweenContextValidator`3.IsValid(`1,`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.InclusiveBetweenContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.Validators.LessThanContextValidator`3">
            <summary>A validator that determines if a property value is less than a comparison value stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.LessThanContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanContextValidator`3.#ctor(System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="valueResolver">The resolver to obtain the comparison value from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanContextValidator`3.IsValid(`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Validation.Validators.LessThanOrEqualToContextValidator`3">
            <summary>A validator that determines if a property value is less than or equal to a comparison value stored on the validation context.</summary>
            <typeparam name="TType">The model type containing the property to be validated.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TContext">The root context type.</typeparam>
        </member>
        <member name="P:AllOverIt.Validation.Validators.LessThanOrEqualToContextValidator`3.Name">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanOrEqualToContextValidator`3.#ctor(System.Func{`2,`1})">
            <summary>Constructor.</summary>
            <param name="valueResolver">The resolver to obtain the comparison value from the validation context.</param>
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanOrEqualToContextValidator`3.IsValid(`1,`1)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Validation.Validators.LessThanOrEqualToContextValidator`3.GetDefaultMessageTemplate(System.String)">
            <inheritdoc />
        </member>
    </members>
</doc>
