<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllOverIt</name>
    </assembly>
    <members>
        <member name="T:AllOverIt.Bindings.BindingOptions">
            <Summary>
            Specifies binding options that, when combined, provide the ability to filter reflection operations that
            target property and method information on a type.
            </Summary>
        </member>
        <member name="F:AllOverIt.Bindings.BindingOptions.Static">
            <summary>
            Static2
            </summary>
        </member>
        <member name="M:AllOverIt.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.IDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>Replaces parameter expressions in a lambda expression with alternate parameter expressions in the provided mapping.</summary>
            <param name="parameterMap">Contains the mapping of parameter expressions to replace in the provided lambda expression.</param>
            <param name="expression">The lambda expression to have its parameter expressions replaced.</param>
            <returns>A new expression with the parameter expressions replaced.</returns>
        </member>
        <member name="P:AllOverIt.Extensions.ObjectExtensions.DefaultHashCodeBindings">
            <summary>
            Specifies the binding options to use when calculating the hash code of an object when using
            <see cref="M:AllOverIt.Extensions.ObjectExtensions.CalculateHashCode``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})"/>.
            </summary>
        </member>
        <member name="M:AllOverIt.Extensions.ObjectExtensions.ToPropertyDictionary(System.Object,System.Boolean,AllOverIt.Bindings.BindingOptions)">
            <summary>Creates a dictionary containing property names and associated values.</summary>
            <param name="instance">The object instance to obtain property names and values from.</param>
            <param name="includeNulls">If <c>true</c> then <c>null</c> value properties will be returned, otherwise they will be omitted.</param>
            <param name="bindingOptions">Binding options that determines how property names are resolved.</param>
            <returns>Returns  a dictionary containing property names and associated values.</returns>
        </member>
        <member name="M:AllOverIt.Extensions.ObjectExtensions.IsIntegral(System.Object)">
            <summary>Determines if the specified object is an integral type (signed or unsigned).</summary>
            <param name="instance">The object instance to be compared to an integral type.</param>
            <returns>Returns <c>true</c> if the specified object is an integral type (signed or unsigned).</returns>
        </member>
        <member name="M:AllOverIt.Extensions.ObjectExtensions.As``1(System.Object,``0)">
            <summary>Converts the provided source <paramref name="instance"/> to a specified type.</summary>
            <typeparam name="TType">The type that <paramref name="instance"/> is to be converted to.</typeparam>
            <param name="instance">The object instance to be converted.</param>
            <param name="defaultValue">The default value to be returned when <paramref name="instance"/> is null.</param>
            <returns>Returns <paramref name="instance"/> converted to the specified <typeparam name="TType"></typeparam>.</returns>
        </member>
        <member name="M:AllOverIt.Extensions.ObjectExtensions.AsNullable``1(System.Object,System.Nullable{``0})">
            <summary>Converts the provided source <paramref name="instance"/> to a specified nullable type.</summary>
            <typeparam name="TType">The (nullable) type that <paramref name="instance"/> is to be converted to.</typeparam>
            <param name="instance">The object instance to be converted.</param>
            <param name="defaultValue">The default value to be returned when <paramref name="instance"/> is null.</param>
            <returns>Returns <paramref name="instance"/> converted to the specified <typeparam name="TType"></typeparam>.</returns>
        </member>
        <member name="M:AllOverIt.Extensions.StringExtensions.As``1(System.String,``0,System.Boolean)">
            <summary>Converts a given string to another type.</summary>
            <typeparam name="TType">The type to convert to.</typeparam>
            <param name="value">The value to be converted.</param>
            <param name="defaultValue">The value to return if <see cref="!:value"/> is null, empty or contains whitespace, or is considered
            invalid for the <typeparamref name="TType"/> converter.</param>
            <param name="ignoreCase">Indicates if the conversion should ignore case-sensitivity.</param>
            <returns>The converted value, or the <see cref="!:defaultValue"/> value if the conversion cannot be performed.</returns>
            <remarks>
              <para>Supported conversions include byte, sbyte, decimal, double, float, int, uint, long, ulong, short, ushort, string and enum.</para>
              <para>Char and Boolean type conversions must be performed using the <see cref="M:AllOverIt.Extensions.ObjectExtensions.As``1(System.Object,``0)"/> method.</para>
              <para>No attempt is made to avoid overflow or argument exceptions.</para>
            </remarks>
        </member>
        <member name="M:AllOverIt.Extensions.StringExtensions.AsNullable``1(System.String,System.Boolean)">
            <summary>Converts a given string to another nullable type.</summary>
            <typeparam name="TType">The nullable type to convert to.</typeparam>
            <param name="value">The value to be converted.</param>
            <param name="ignoreCase">Indicates if the conversion should ignore case-sensitivity.</param>
            <returns>The converted value, or null if the conversion cannot be performed.</returns>
        </member>
        <member name="M:AllOverIt.Extensions.TypeExtensions.GetPropertyInfo(System.Type,AllOverIt.Bindings.BindingOptions,System.Boolean)">
            <summary>
            Gets <see cref="T:System.Reflection.PropertyInfo"/> (property metadata) for a given <see cref="T:System.Type"/> and binding option.
            </summary>
            <param name="type">The type to obtain property metadata for.</param>
            <param name="binding">The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata.</param>
            <param name="declaredOnly">If true, the metadata of properties in the declared class as well as base class(es) are returned.
            If false, only property metadata of the declared type is returned.</param>
            <returns>The property metadata, as <see cref="T:System.Reflection.PropertyInfo"/>, of a provided <see cref="T:System.Type"/>.</returns>
            <remarks>When class inheritance is involved, this method returns the first property found, starting at the type represented
            by <param name="type"></param>.</remarks>
        </member>
        <member name="M:AllOverIt.Extensions.TypeExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> (property metadata) for a given property on a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to obtain the property metadata from.</param>
            <param name="propertyName">The name of the property to obtain metadata for.</param>
            <returns>The property metadata, as <see cref="T:System.Reflection.PropertyInfo"/>, of a specified property on the provided <param name="type"></param>.</returns>
            <remarks>When class inheritance is involved, this method returns the first property found, starting at the type represented
            by <param name="type"></param>.</remarks>
        </member>
        <member name="M:AllOverIt.Extensions.TypeInfoExtensions.GetPropertyInfo(System.Reflection.TypeInfo,System.Boolean)">
            <summary>
            Gets all <see cref="T:System.Reflection.PropertyInfo"/> (property metadata) for a given <see cref="T:System.Reflection.TypeInfo"/>.
            </summary>
            <param name="typeInfo">The <see cref="T:System.Reflection.TypeInfo"/> to obtain all property metadata.</param>
            <param name="declaredOnly">If true, the metadata of properties in the declared class as well as base class(es) are returned.
            If false, only property metadata of the declared type is returned.</param>
            <returns>The property metadata, as <see cref="T:System.Reflection.PropertyInfo"/>, of a provided <see cref="T:System.Reflection.TypeInfo"/>.</returns>
            <remarks>When class inheritance is involved, this method returns the first property found, starting at the type represented
            by <param name="typeInfo"></param>.</remarks>
        </member>
        <member name="M:AllOverIt.Extensions.TypeInfoExtensions.GetPropertyInfo(System.Reflection.TypeInfo,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> (property metadata) for a given property on a <see cref="T:System.Reflection.TypeInfo"/>.
            </summary>
            <param name="typeInfo">The <see cref="T:System.Reflection.TypeInfo"/> to obtain the property metadata from.</param>
            <param name="propertyName">The name of the property to obtain metadata for.</param>
            <returns>The property metadata, as <see cref="T:System.Reflection.PropertyInfo"/>, of a specified property on the provided <param name="typeInfo"></param>.</returns>
            <remarks>When class inheritance is involved, this method returns the first property found, starting at the type represented
            by <param name="typeInfo"></param>.</remarks>
        </member>
        <member name="T:AllOverIt.Helpers.AsyncLazy`1">
            <summary>
            Provides support for lazy initialization using a factory that returns a Task{TType}.
            </summary>
            <typeparam name="TType">The type that is lazily initialized.</typeparam>
        </member>
        <member name="M:AllOverIt.Helpers.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the AsyncLazy{TType} class. When lazy initialization occurs, the specified initialization
            factory is executed asynchronously.
            </summary>
            <param name="factory">The factory used for lazy initialization of the stored value.</param>
        </member>
        <member name="M:AllOverIt.Helpers.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the AsyncLazy{TType} class. When lazy initialization occurs, the specified initialization
            factory is executed asynchronously.
            </summary>
            <param name="factory">The factory used for lazy initialization of the stored value.</param>
        </member>
        <member name="M:AllOverIt.Helpers.AsyncLazy`1.GetAwaiter">
            <summary>
            Gets an awaiter that allows for 'await lazyProp' instead of 'await lazyProp.Value'
            </summary>
            <returns>An awaiter for the value being initialized.</returns>
        </member>
        <member name="T:AllOverIt.Helpers.EnumHelper">
            <summary>Provides static, general purpose, methods related to using Enums.</summary>
        </member>
        <member name="M:AllOverIt.Helpers.EnumHelper.GetEnumValues``1">
            <summary>Returns all possible enum values.</summary>
            <typeparam name="TType">The Enum type.</typeparam>
            <returns>All possible enum values.</returns>
        </member>
        <member name="T:AllOverIt.Helpers.Raii">
            <summary>A disposable object implementing the Resource Acquisition Is Initialization  idiom.</summary>
        </member>
        <member name="M:AllOverIt.Helpers.Raii.#ctor(System.Action,System.Action)">
            <summary>Constructor used to provide the initialization and cleanup actions to be invoked.</summary>
            <param name="initialize">The initialization action to invoke at the time of initialization.</param>
            <param name="cleanUp">The cleanup action to perform when the object is disposed.</param>
        </member>
        <member name="M:AllOverIt.Helpers.Raii.Dispose">
            <summary>This is called when the instance is being disposed.</summary>
        </member>
        <member name="M:AllOverIt.Helpers.Raii.Dispose(System.Boolean)">
            <summary>
            A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time
            of construction is invoked.
            </summary>
            <param name="disposing">Is true when the object is being disposed, otherwise false.</param>
        </member>
        <member name="T:AllOverIt.Helpers.Raii`1">
            <summary>
            A strongly-type disposable object implementing the Resource Acquisition Is Initialization  idiom.
            </summary>
            <typeparam name="TType">The type being initialized.</typeparam>
        </member>
        <member name="M:AllOverIt.Helpers.Raii`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>Constructor used to provide the initialization and cleanup actions to be invoked.</summary>
            <param name="initialize">The initialization action to invoke at the time of initialization.</param>
            <param name="cleanUp">The cleanup action to perform when the object is disposed.</param>
        </member>
        <member name="M:AllOverIt.Helpers.Raii`1.Dispose">
            <summary>This is called when the instance is being disposed.</summary>
        </member>
        <member name="M:AllOverIt.Helpers.Raii`1.Dispose(System.Boolean)">
            <summary>
            A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time
            of construction is invoked.
            </summary>
            <param name="disposing">Is true when the object is being disposed, otherwise false.</param>
        </member>
    </members>
</doc>
