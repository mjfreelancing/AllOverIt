<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllOverIt.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinder">
            <summary>A factory for creating an <see cref="T:AllOverIt.Patterns.Enumeration.EnrichedEnum`1"/> specific model binder.</summary>
        </member>
        <member name="M:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinder.CreateInstance``1">
            <summary>Creates an <see cref="T:AllOverIt.Patterns.Enumeration.EnrichedEnum`1"/> specific model binder.</summary>
        </member>
        <member name="T:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinder`1">
            <summary>Implements an <see cref="T:AllOverIt.Patterns.Enumeration.EnrichedEnum`1"/> specific model binder.</summary>
            <typeparam name="TEnum">The concrete <see cref="T:AllOverIt.Patterns.Enumeration.EnrichedEnum`1"/> type.</typeparam>
        </member>
        <member name="M:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinderProvider">
            <summary>A model binder provider for all <see cref="T:AllOverIt.Patterns.Enumeration.EnrichedEnum`1"/> types.</summary>
        </member>
        <member name="M:AllOverIt.AspNetCore.ModelBinders.EnrichedEnumModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.AspNetCore.ModelBinders.ValueArrayModelBinderBase">
            <summary>Base class for ValueArrayModelBinder.</summary>
            <remarks>Required so a static Regex can be defined in a non-generic class.</remarks>
        </member>
        <member name="F:AllOverIt.AspNetCore.ModelBinders.ValueArrayModelBinderBase.SplitRegex">
            <summary>Splits all values by comma, taking into account quoted values.</summary>
        </member>
        <member name="T:AllOverIt.AspNetCore.ModelBinders.ValueArrayModelBinder`2">
            <summary>Provides a model binder for any <see cref="T:AllOverIt.AspNetCore.ValueArray.ValueArray`1"/>.</summary>
            <typeparam name="TArray">The <see cref="T:AllOverIt.AspNetCore.ValueArray.ValueArray`1"/> type to bind.</typeparam>
            <typeparam name="TType">The type within the array. Must be convertible from a string via <seealso cref="M:AllOverIt.Extensions.StringExtensions.As``1(System.String,``0)"/>.</typeparam>
            <remarks>Only supports arrays of values within a QueryString. The expected format is paramName=Value1,Value2,Value3 with each value quoted if required.</remarks>
        </member>
        <member name="M:AllOverIt.AspNetCore.ModelBinders.ValueArrayModelBinder`2.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.AspNetCore.ValueArray.GuidArray">
            <summary>Represents an array of GUIDs that can be bound to a model from a query string.</summary>
        </member>
        <member name="T:AllOverIt.AspNetCore.ValueArray.IntegerArray">
            <summary>Represents an array of strings that can be bound to a model from a query string.</summary>
        </member>
        <member name="T:AllOverIt.AspNetCore.ValueArray.StringArray">
            <summary>Represents an array of strings that can be bound to a model from a query string.</summary>
        </member>
        <member name="T:AllOverIt.AspNetCore.ValueArray.ValueArray`1">
            <summary>Represents an array of values that can be bound to a model from a query string.</summary>
            <remarks>The expected format is paramName=Value1,Value2,Value3 with each value quoted if required.</remarks>
        </member>
        <member name="P:AllOverIt.AspNetCore.ValueArray.ValueArray`1.Values">
            <summary>The values converted from the query string.</summary>
        </member>
    </members>
</doc>
