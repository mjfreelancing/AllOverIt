<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllOverIt.Evaluator</name>
    </assembly>
    <members>
        <member name="T:AllOverIt.Evaluator.Exceptions.FormulaException">
            <summary>An exception that can be thrown by the FormulaCompiler while compiling a formula expression.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.FormulaException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.FormulaException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.FormulaException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Exceptions.OperationFactoryException">
            <summary>An exception that can be thrown by the ArithmeticOperationFactory while compiling a formula expression.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperationFactoryException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperationFactoryException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperationFactoryException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Exceptions.OperatorException">
            <summary>An exception that can be thrown by a concrete IOperator while compiling a formula expression.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperatorException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperatorException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.OperatorException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Exceptions.VariableException">
            <summary>An exception that can be thrown by a concrete IVariable.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Exceptions.VariableImmutableException">
            <summary>An exception that can be thrown to indicate a concrete IVariable instance is not mutable.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableImmutableException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableImmutableException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Exceptions.VariableImmutableException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Extensions.FormulaCompilerExtensions">
            <summary>Provides extension methods for IFormulaCompiler.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Extensions.FormulaCompilerExtensions.GetResult(AllOverIt.Evaluator.FormulaCompiler,System.String,AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Compiles a formula and returns the invoked result.</summary>
            <param name="compiler">The IFormulaCompiler instance used to compile the formula.</param>
            <param name="formula">The formula as a string.</param>
            <param name="variableRegistry">An optional registry where, if required, contains previously populated variables required for the evaluation of the formula.</param>
            <returns>The evaluated result.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaCompiler">
            <summary>Compiles a mathematical expression provided as a string to a delegate that can be repeatedly invoked for re-evaluation.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaCompiler.#ctor(AllOverIt.Evaluator.Operations.IArithmeticOperationFactory,AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory)">
            <summary>Constructor.</summary>
            <param name="operationFactory">The arithmetic operation factory used for building expressions.</param>
            <param name="userMethodFactory">The user-defined method factory used for evaluating higher level operations.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaCompiler.Compile(System.String,AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Compiles a formula represented as a string into a delegate that can be repeatedly invoked for re-evaluation.</summary>
            <param name="formula">The mathematical formula to be compiled.</param>
            <param name="variableRegistry">The registry of variables referenced by the formula that are required for evaluation. This
            can be populated with all required variables before or after compilation, but before evaluation. If a registry is not provided
            and the formula contains variables then an instance will be created and provided as part of the result.</param>
            <returns>The compiler result containing the variable registry (if originally provided or variables are found in the formula),
            the compiled delegate, and a list of variables referenced by the formula (if applicable).</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaCompilerResult">
            <summary>Contains a compiled delegate (resolver) and a list of referenced variables resulting from the compilation of a formula.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaCompilerResult.VariableRegistry">
            <summary>The variable registry reference by the compiled formula. This will be null if the formula compiler was not provided
            a variable registry and the formula did not contain any variables.</summary>
            <remarks>Expected variables (as per ReferencedVariableNames) can be added to the registry after compilation if required.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaCompilerResult.Resolver">
            <summary>The compiled delegate that returns the result of the formula when invoked.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaCompilerResult.ReferencedVariableNames">
            <summary>An enumerable of all variable names explicitly referenced by the formula.
            This will be null if the formula did not have any variables.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaCompilerResult.#ctor(AllOverIt.Evaluator.Variables.IVariableRegistry,System.Func{System.Double},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>Constructor.</summary>
            <param name="variableRegistry">The variable registry reference by the compiled formula. Variables can be added at any time
            prior to evaluation.</param>
            <param name="resolver">The compiled delegate that when invoked will return the result of the formula.</param>
            <param name="referencedVariableNames">An enumerable of all variable names explicitly referenced by the formula. This will be
            null if the formula did not have any variables.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaExpressionFactory">
            <summary>Implements a factory that creates expressions required for compiling a formula.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaExpressionFactory.CreateExpression(AllOverIt.Evaluator.Operations.IArithmeticOperation,System.Collections.Generic.Stack{System.Linq.Expressions.Expression})">
            <summary>Creates an Expression for an arithmetic operation.</summary>
            <param name="operation">The arithmetic operation to create an Expression for.</param>
            <param name="expressionStack">Contains the expressions required for processing the required operation.</param>
            <returns>An Expression representing the arithmetic operation.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaExpressionFactory.CreateExpression(System.String,AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Creates an expression that gets the value of a variable from the variable registry.</summary>
            <param name="variableName">The name of the variable to get the value for.</param>
            <param name="variableRegistry">The variable registry containing the required value.</param>
            <returns>An expression that gets the value of a variable from the variable registry.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaProcessor">
            <summary>Parses a mathematical formula and compiles it to an expression that can be later evaluated.</summary>
            <remarks>A compiled expression provides a vast performance benefit when the formula needs to be evaluated multiple times.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaProcessor.#ctor(AllOverIt.Evaluator.Operations.IArithmeticOperationFactory,AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory)">
            <summary>Constructor.</summary>
            <param name="operationFactory">Provides the required support for performing mathematical operations, such as addition, multiplication,
            and so on.</param>
            <param name="userDefinedMethodFactory">Provides support for user-defined methods in addition to the built-in library of methods. Refer
            to the <c>UserDefinedMethodFactory</c> for a list of available built-in methods.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaProcessor.Process(System.String,AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Parses a provided formula to create a compiled expression that can later be evaluated.</summary>
            <param name="formula">The formula to be parsed and compiled into an expression.</param>
            <param name="variableRegistry">The variable registry to be referenced during the formula's evaluation (after compilation).</param>
            <returns>The processed result, including the formula's compiled expression, a collection of any referenced variables, and a variable
            registry that will be referenced by the compiled expression when it is evaluated.</returns>
            <remarks>The variable registry does not need to be provided if the formula does not contain any variables. If the formula does contain
            variables then there are two use cases. First, if a variable registry is not provided then an instance will be created during processing
            and will be returned as part of the result. Second, if a variable registry is provided then that instance will be used (and will always
            be returned with the result, even if there are no variables in the formula). It is the caller's responsibility to populate the variable
            registry before the compiled expression is evaluated.</remarks>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaProcessorResult">
            <summary>Contains the result of parsing and processing a formula.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaProcessorResult.FormulaExpression">
            <summary>Gets the expression built from a processed formula. When this expression is compiled and invoked
            the value of the formula is returned.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaProcessorResult.ReferencedVariableNames">
            <summary>Gets an enumerable of all variable names explicitly referenced by the formula.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaProcessorResult.VariableRegistry">
            <summary>The variable registry that will be referenced by the compiled expression during evaluation.
            This may be null if the formula does not contain any variables.</summary>
            <remarks>If the compiler is provided a variable registry then this property will refer to the same reference
            even if the formula did not contain any variables.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaProcessorResult.#ctor(System.Linq.Expressions.Expression{System.Func{System.Double}},System.Collections.Generic.IReadOnlyCollection{System.String},AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Constructor.</summary>
            <param name="formulaExpression">The expression built from a processed formula.</param>
            <param name="referencedVariableNames">A collection of all variable names explicitly referenced by the formula.</param>
            <param name="variableRegistry">The variable registry that will be referenced by the compiled expression during evaluation.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.FormulaTokenProcessorContext">
            <summary>Contains context information about a formula token and an associated processor.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaTokenProcessorContext.Predicate">
            <summary>The predicate that determines if the processor should be invoked for the provided token.</summary>
            <remarks>The input arguments of the predicate include the next token to be read and a flag to indicate if the
            token is within the context of a user-defined method.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.FormulaTokenProcessorContext.Processor">
            <summary>The delegate used for processing a given token.</summary>
            <remarks>The input arguments of the processor include the next token to be read and a flag to indicate if the token
            is within the context of a user defined method. The processor returns true to indicate processing is to continue or
            false to indicate processing of the current scope is complete (such as reading arguments of a user defined method).</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.FormulaTokenProcessorContext.#ctor(System.Func{System.Char,System.Boolean,System.Boolean},System.Func{System.Char,System.Boolean,System.Boolean})">
            <summary>Constructor.</summary>
            <param name="predicate">The predicate that determines if the processor should be invoked for the provided token.</param>
            <param name="processor">The delegate used for processing a given token.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.AbsOperation">
            <summary>An operation used to calculate the absolute value of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.AbsOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.AcosOperation">
            <summary>An operation used to calculate the angle (in radians) of a cosine value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.AcosOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.ArithmeticOperation">
            <summary>Represents an arithmetic operator or a user-defined method.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.ArithmeticOperation.Precedence">
            <summary>The precedence that determines the order of operations. A lower precedence value indicates a higher priority
            (refer to http://en.wikipedia.org/wiki/Order_of_operations).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperation.#ctor(System.Int32,System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <summary>Constructor.</summary>
            <param name="precedence">The precedence that determines the order of operations.</param>
            <param name="argumentCount">The number of required arguments for the operator or user-defined method.</param>
            <param name="creator"></param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.ArithmeticOperationBase">
            <summary>An abstract base class for all arithmetic operators and user defined methods.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.ArithmeticOperationBase.ArgumentCount">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationBase.#ctor(System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <summary>Constructor.</summary>
            <param name="argumentCount">The number of required arguments.</param>
            <param name="creator">The factory that creates the required operation using the provided arguments (as expressions).</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationBase.GetExpression(System.Linq.Expressions.Expression[])">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory">
            <summary>A factory used for registering and creating instances of an ArithmeticOperation that implements an associated mathematical operator.
            The factory assumes a lower precedence value indicates a higher priority (refer to http://en.wikipedia.org/wiki/Order_of_operations). </summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory.RegisteredOperations">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory.TryRegisterOperation(System.String,System.Int32,System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory.RegisterOperation(System.String,System.Int32,System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <inheritdoc />
            <remarks>If the symbol is already registered then an OperationFactoryException will be raised.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ArithmeticOperationFactory.GetOperation(System.String)">
            <inheritdoc />
            <returns>Only one instance per type is ever created.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.AsinOperation">
            <summary>An operation used to calculate the angle (in radians) of a sine value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.AsinOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.AtanOperation">
            <summary>An operation used to calculate the angle (in radians) of a tangent value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.AtanOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.CeilingOperation">
            <summary>An operation used to calculate the smallest integral value greater than or equal to a given number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.CeilingOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.CoshOperation">
            <summary>An operation used to calculate the hyperbolic cosine of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.CoshOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.CosOperation">
            <summary>An operation used to calculate the cosine of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.CosOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.CubeRootOperation">
            <summary>An operation used to calculate the cube root of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.CubeRootOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.ExpOperation">
            <summary>An operation used to raise 'e' to a specified power.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.ExpOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.FloorOperation">
            <summary>An operation used to calculate the largest integral value greater than or equal to a given number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.FloorOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.IArithmeticOperation">
            <summary>Represents an arithmetic operator or user defined method.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.IArithmeticOperation.ArgumentCount">
            <summary>The number of arguments required by the operator or user defined method.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IArithmeticOperation.GetExpression(System.Linq.Expressions.Expression[])">
            <summary>Creates an Expression that represents the operator or user defined method.</summary>
            <param name="expressions">The arguments required for creating the required expression.</param>
            <returns>The expression representing the operator or user defined method.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.IArithmeticOperationFactory">
            <summary>Represents an arithmetic operation factory for registering and creating instances of an ArithmeticOperation
            that implements an associated operator..</summary>
            <remarks>It is recommended to use a single instance of the factory.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.IArithmeticOperationFactory.RegisteredOperations">
            <summary>Gets all registered operations based on their associated symbol.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IArithmeticOperationFactory.TryRegisterOperation(System.String,System.Int32,System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <summary>Attempts to register a new operation in terms of its operator symbol, precedence level and a factory used for
            creating the required operation. If the symbol is already registered then the request is ignored.</summary>
            <param name="symbol">The symbol that identifies the operation being registered.</param>
            <param name="precedence">The precedence level that determines the order of operations. A lower value indicates a higher precedence.</param>
            <param name="argumentCount">The number of required arguments.</param>
            <param name="operatorCreator">The factory used to create the operation using the provided arguments (as expressions).</param>
            <returns>True if the symbol was registered, otherwise false.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IArithmeticOperationFactory.RegisterOperation(System.String,System.Int32,System.Int32,System.Func{System.Linq.Expressions.Expression[],AllOverIt.Evaluator.Operators.IOperator})">
            <summary>Registers a new operation in terms of its operator symbol, precedence level and a factory used for creating the
            required operation.</summary>
            <param name="symbol">The symbol that identifies the operation being registered.</param>
            <param name="precedence">The precedence level that determines the order of operations. A lower value indicates a higher precedence.</param>
            <param name="argumentCount">The number of required arguments.</param>
            <param name="operatorCreator">The factory used to create the operation using the provided arguments (as expressions).</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IArithmeticOperationFactory.GetOperation(System.String)">
            <summary>Gets the operation object associated with a specified operator symbol.</summary>
            <param name="symbol">The symbol that identifies the operation to be created.</param>
            <returns>The constructed operation.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory">
            <summary>Represents a user defined method factory.</summary>
            <remarks>It is recommended to use a single instance of the factory.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory.RegisteredMethods">
            <summary>Gets all registered user-defined method names.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory.RegisterMethod``1(System.String)">
            <summary>Registers a user defined method with the factory using an associated name and operation type.</summary>
            <typeparam name="TOperationType">The operation type (inheriting ArithmeticOperationBase) that implements the user-defined method.</typeparam>
            <param name="methodName">The name of the user-defined method.</param>
            <remarks>The operation type must not maintain state (and therefore be thread safe) as the factory will only ever create a single instance.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory.IsRegistered(System.String)">
            <summary>Indicates if the provided user-defined method name is registered with the factory.</summary>
            <param name="methodName">The name of the user-defined method to check.</param>
            <returns>True if the user-defined method name is registered.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.IUserDefinedMethodFactory.GetMethod(System.String)">
            <summary>Gets an instance of the class implementing the user-defined method identified by the provided method name.</summary>
            <param name="methodName">The name of the user-defined method identifying the operation type to return.</param>
            <returns>The concrete type implementing the user-defined method.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.Log10Operation">
            <summary>An operation used to calculate the log10 of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.Log10Operation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.Log2Operation">
            <summary>An operation used to calculate the log2 of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.Log2Operation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.LogOperation">
            <summary>An operation used to calculate the natural log of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.LogOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.MaxOperation">
            <summary>An operation used to get the maximum of two values.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.MaxOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.MinOperation">
            <summary>An operation used to get the minimum of two values.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.MinOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.PercentOperation">
            <summary>An operation used to calculate the percentage that one operand is of another.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.PercentOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.RoundOperation">
            <summary>An operation used to round a number to a specified number of decimal places.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.RoundOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.SinhOperation">
            <summary>An operation used to calculate the hyperbolic sine of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.SinhOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.SinOperation">
            <summary>An operation used to calculate the sine of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.SinOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.SqrtOperation">
            <summary>An operation used to calculate the square root of a number.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.SqrtOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.TanhOperation">
            <summary>An operation used to calculate the hyperbolic tangent of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.TanhOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.TanOperation">
            <summary>An operation used to calculate the tangent of an angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.TanOperation.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operations.UserDefinedMethodFactory">
            <summary>A factory containing user-defined methods that can be evaluated as part of a formula.</summary>
            <remarks>
            The factory includes the following pre-defined methods:
            <para>ROUND: Rounds a number to a specified number of decimal places.</para>
            <para>SQRT: Calculate the square root of a number.</para>
            <para>CBRT: Calculate the cube root of a number.</para>
            <para>LOG10: Calculate the log10 of a number.</para>
            <para>LOG2: Calculate the log2 of a number.</para>
            <para>LOG: Calculate the natural log of a number.</para>
            <para>EXP: Raise 'e' to a specified power.</para>
            <para>PERC: Calculate the percentage that one operand is of another.</para>
            <para>SIN: Calculate the sine of an angle (in radians).</para>
            <para>COS: Calculate the cosine of an angle (in radians).</para>
            <para>TAN: Calculate the tangent of an angle (in radians).</para>
            <para>SINH: Calculate the hyperbolic sine of an angle (in radians).</para>
            <para>COSH: Calculate the hyperbolic cosine of an angle (in radians).</para>
            <para>TANH: Calculate the hyperbolic tangent of an angle (in radians).</para>
            <para>ASIN: Calculate the angle (in radians) of a sine value.</para>
            <para>ACOS: Calculate the angle (in radians) of a cosine value.</para>
            <para>ATAN: Calculate the angle (in radians) of a tangent value.</para>
            <para>MIN: Returns the minimum of two values.</para>
            <para>MAX: Returns the maximum of two values.</para>
            <para>ABS: Returns the absolute value of a number.</para>
            <para>CEIL: Returns the smallest integral value greater than or equal to a given number.</para>
            <para>FLOOR: Returns the largest integral value greater than or equal to a given number.</para>
            </remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.UserDefinedMethodFactory.RegisterMethod``1(System.String)">
            <summary>Registers an operation type that provides the implementation for a named method.</summary>
            <typeparam name="TOperationType">The type implementing the registered method.</typeparam>
            <param name="methodName">The case-insensitive method name being registered.</param>
            <remarks>The operation type is expected to be thread-safe and should therefore not store state.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.UserDefinedMethodFactory.IsRegistered(System.String)">
            <summary>Indicates if the requested method name has been registered.</summary>
            <param name="methodName">The case-insensitive method name being queried.</param>
            <returns>True if the requested method name has been registered, otherwise false.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Operations.UserDefinedMethodFactory.GetMethod(System.String)">
            <summary>Gets an instance of the operation type that was registered using the provided method name.</summary>
            <param name="methodName">The registered method name associated with the operation type to be returned.</param>
            <returns>An instance of the operation type that was registered using the provided method name.</returns>
            <remarks>The operation type is only ever created once (per factory instance).</remarks>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.AbsOperator">
            <summary>An expression operator that calculates the absolute value of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.AbsOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.AcosOperator">
            <summary>An expression operator that calculates the angle (in radians) of a cosine value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.AcosOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.AddOperator">
            <summary>An expression operator that adds two operands.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.AddOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.AsinOperator">
            <summary>An expression operator that calculates the angle (in radians) of a sine value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.AsinOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.AtanOperator">
            <summary>An expression operator that calculates the angle (in radians) of a tangent value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.AtanOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.BinaryOperator">
            <summary>An expression operator that operates on two operands.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.BinaryOperator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="operatorType"></param>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.BinaryOperator.GetExpression">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.CeilingOperator">
            <summary>An expression operator that returns the smallest integral value greater than or equal to the given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.CeilingOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.CoshOperator">
            <summary>An expression operator that calculates the hyperbolic cosine of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.CoshOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.CosOperator">
            <summary>An expression operator that calculates the cosine of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.CosOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.CubeRootOperator">
            <summary>An expression operator that calculates the cube root of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.CubeRootOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.DivideOperator">
            <summary>An expression operator that divides two operands.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.DivideOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.ExpOperator">
            <summary>An expression operator that calculates the value of 'e' raised to the power of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.ExpOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.FloorOperator">
            <summary>An expression operator that return the largest integral value greater than or equal to the given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.FloorOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.IOperator">
            <summary>An interface used to obtain an Expression for an evaluator operator.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.IOperator.GetExpression">
            <summary>Gets an Expression that is the result of invoking the operator.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.Log10Operator">
            <summary>An expression operator that calculates log10 of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.Log10Operator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.Log2Operator">
            <summary>An expression operator that calculates log2 of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.Log2Operator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.LogOperator">
            <summary>An expression operator that calculates the natural logarithm of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.LogOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.MaxOperator">
            <summary>An expression operator that returns the maximum of two values.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.MaxOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.MinOperator">
            <summary>An expression operator that returns the minimum of two values.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.MinOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.ModuloOperator">
            <summary>An expression operator that calculates the modulo of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.ModuloOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.MultiplyOperator">
            <summary>An expression operator that multiplies two operands.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.MultiplyOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.NegateOperator">
            <summary>An expression operator that negates the value of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.NegateOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.Operator`1">
            <summary>An abstract base class used for implementing unary, binary and custom operators.</summary>
            <typeparam name="TType">The type (a Func) used for operating on one or more operands. This func must
            accept one or more Expression arguments and return a resultant Expression.</typeparam>
        </member>
        <member name="P:AllOverIt.Evaluator.Operators.Operator`1.OperatorType">
            <summary>The object type implementing the custom operator.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.Operator`1.#ctor(`0)">
            <summary>Constructor.</summary>
            <param name="operatorType">The operator type.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.OperatorBase">
            <summary>An abstract class for defining an operator that can create an expression for the operation it performs.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.OperatorBase.GetExpression">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.OperatorBase.Create``1(System.Linq.Expressions.Expression[],System.Func{System.Linq.Expressions.Expression[],``0})">
            <summary>A factory method to create a concrete instance of an operator.</summary>
            <typeparam name="TOperator">The type implementing IOperator with a constructor containing the required number of arguments.</typeparam>
            <param name="expressions">The arguments (as Expressions) to be passed to the constructor of the operator being created.</param>
            <param name="creator">The factory method used to build the operator based on the provided arguments.</param>
            <returns>The concrete IOperator instance.</returns>
            <exception cref="T:AllOverIt.Evaluator.Exceptions.OperatorException">When the number of arguments passed in 'expressions' does not match the number of arguments expected by the operator's constructor.</exception>
            <exception cref="T:System.InvalidOperationException">When the operator contains more than one constructor.</exception>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.PercentOperator">
            <summary>An expression operator that calculates the percentage that one operand is of another.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.PercentOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.PowerOperator">
            <summary>An expression operator that calculates the value of one operand raised to the power of another.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.PowerOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.RoundOperator">
            <summary>An expression operator that rounds the value of one operand to the number of decimal places provided by another.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.RoundOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be rounded.</param>
            <param name="decimals">The number of decimal places to round the operand to.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.SinhOperator">
            <summary>An expression operator that calculates the hyperbolic sine of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.SinhOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.SinOperator">
            <summary>An expression operator that calculates the sine of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.SinOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.SqrtOperator">
            <summary>An expression operator that calculates the square root of a given operand.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.SqrtOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.SubtractOperator">
            <summary>An expression operator that subtracts one operand from another.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.SubtractOperator.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="leftOperand">The left operand (argument) of the operator.</param>
            <param name="rightOperand">The right operand (argument) of the operator.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.TanhOperator">
            <summary>An expression operator that calculates the hyperbolic tangent of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.TanhOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.TanOperator">
            <summary>An expression operator that calculates the tangent of a specified angle (in radians).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.TanOperator.#ctor(System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Operators.UnaryOperator">
            <summary>An expression operator that operates on a single operand to create a new expression as the result.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.UnaryOperator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="operatorType">The unary operator that returns the result of an operand (as Expressions).</param>
            <param name="operand">The operand (argument) to be evaluated.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Operators.UnaryOperator.GetExpression">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.ConstantVariable">
            <summary>A read-only constant variable that must be initialized at the time of construction.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.ConstantVariable.Value">
            <summary>The variable's value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.ConstantVariable.#ctor(System.String,System.Double)">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's value.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.DelegateVariable">
            <summary>A delegate based variable that is re-evaluated each time the <see cref="P:AllOverIt.Evaluator.Variables.DelegateVariable.Value"/> is read.</summary>
            <remarks>For a delegate based variable that is only evaluated the first time the <see cref="P:AllOverIt.Evaluator.Variables.DelegateVariable.Value"/> is read,
            see <see cref="T:AllOverIt.Evaluator.Variables.LazyVariable"/>.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.DelegateVariable.Value">
            <summary>The current value of the variable. The value may change on each evaluation depending on how the
            delegate is implemented.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.DelegateVariable.#ctor(System.String,System.Func{System.Double})">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="valueResolver">The delegate to invoke each time the <see cref="P:AllOverIt.Evaluator.Variables.DelegateVariable.Value"/> is read.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.DelegateVariable.#ctor(System.String,AllOverIt.Evaluator.FormulaCompilerResult)">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="compilerResult">The compiled result of a formula. The associated resolver will be re-evaluated
            each time the <see cref="P:AllOverIt.Evaluator.Variables.DelegateVariable.Value"/> is read.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.FormulaCompilerResultExtensions.GetReferencedVariables(AllOverIt.Evaluator.FormulaCompilerResult)">
            <summary>Gets all referenced variables for a compiled formula.</summary>
            <param name="compilerResult">The compiled formula result.</param>
            <returns>All referenced variables for a compiled formula.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableExtensions.SetVariableRegistry(AllOverIt.Evaluator.Variables.IVariable,AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Associates a variable with the specified variable registry if it inherits from VariableBase.</summary>
            <param name="variable">The variable to be associated with a variable registry.</param>
            <param name="variableRegistry">The variable registry to be associated with a variable.</param>
            <remarks>The variable registry replaces any other registry previously associated with the variable.</remarks>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableExtensions.GetAllReferencedVariables(AllOverIt.Evaluator.Variables.IVariable)">
            <summary>Gets all variables referenced by the variable (explicit and implicit).</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.Add(AllOverIt.Evaluator.Variables.IVariableRegistry,AllOverIt.Evaluator.Variables.IVariable)">
            <summary>Adds a variable to a variable registry.</summary>
            <param name="registry">The registry to add a variable to.</param>
            <param name="variable">The variable to add to the registry.</param>
            <returns>The same registry to provide a fluent syntax.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.Add(AllOverIt.Evaluator.Variables.IVariableRegistry,AllOverIt.Evaluator.Variables.IVariable[])">
            <summary>Adds one or more variables to a variable registry.</summary>
            <param name="registry">The registry to add the variables to.</param>
            <param name="variables">The variables to add to the registry.</param>
            <returns>The same registry to provide a fluent syntax.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddConstantVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,System.Double)">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.ConstantVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="value">The constant value to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddMutableVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,System.Double)">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.MutableVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="value">The initial value to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddDelegateVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,System.Func{System.Double})">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.DelegateVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="valueResolver">The initial delegate to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddDelegateVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,AllOverIt.Evaluator.FormulaCompilerResult)">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.DelegateVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="compilerResult">The compiled result of a formula. The associated resolver will be assigned to the
            new variable's delegate.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddLazyVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,System.Func{System.Double})">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.LazyVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="valueResolver">The initial lazily-evaluated delegate to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.Extensions.VariableRegistryExtensions.AddLazyVariable(AllOverIt.Evaluator.Variables.IVariableRegistry,System.String,AllOverIt.Evaluator.FormulaCompilerResult)">
            <summary>Creates, and adds, a new <see cref="T:AllOverIt.Evaluator.Variables.LazyVariable"/> to the variable registry.</summary>
            <param name="variableRegistry">The variable registry to add the newly created variable to.</param>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="compilerResult">The compiled result of a formula. The associated resolver will be assigned to the
            new variable's lazily-evaluated delegate.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.ILazyVariable">
            <summary>A delegate based variable that is evaluated the first time the <see cref="!:Value"/> is read.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.ILazyVariable.Reset">
            <summary>Resets the variable to force its value to be re-evaluated when <see cref="!:Value"/> is next read.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IMutableVariable">
            <summary>A variable that can have its value changed.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IMutableVariable.SetValue(System.Double)">
            <summary>Sets a new value on the variable.</summary>
            <param name="value">The new value to be assigned.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IReadableVariableRegistry">
            <summary>Represents a read-only registry of variables referenced by one or more formula.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.IReadableVariableRegistry.Variables">
            <summary>Gets an enumerable of all variables and their associated name contained in the registry.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IReadableVariableRegistry.GetValue(System.String)">
            <summary>Gets the current value of a variable based on its name.</summary>
            <param name="name">The name of the variable to be evaluated.</param>
            <returns>The current value of a variable based on its name.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IVariable">
            <summary>Describes a named variable.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.IVariable.Name">
            <summary>Gets the name of the variable.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.IVariable.Value">
            <summary>Gets the value of the variable.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.IVariable.ReferencedVariables">
            <summary>Gets all variables this variable references. Only applicable to variables constructed from a FormulaCompilerResult.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IVariableFactory">
            <summary>Represents a factory for creating variables.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateVariableRegistry">
            <summary>Creates a new instance of a variable registry.</summary>
            <returns>A new instance of a variable registry.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateConstantVariable(System.String,System.Double)">
            <summary>Creates a new constant variable.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="value">The constant value to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateMutableVariable(System.String,System.Double)">
            <summary>Creates a new mutable variable.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="value">The initial value to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateDelegateVariable(System.String,System.Func{System.Double})">
            <summary>Creates a new delegate variable that will be re-evaluated each time its value is read.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="valueResolver">The initial delegate to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateLazyVariable(System.String,System.Func{System.Double},System.Boolean)">
            <summary>Creates a new lazily-evaluated delegate variable.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="valueResolver">The initial lazily-evaluated delegate to be assigned to the variable.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateAggregateVariable(System.String,System.Func{System.Double}[])">
            <summary>Creates a delegate-based variable that will invoke one or more value resolvers and aggregate their values.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="valueResolvers">The value resolvers to be evaluated and aggregated. These will be re-evaluated each
             time the created variable is evaluated.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableFactory.CreateAggregateVariable(System.String,AllOverIt.Evaluator.Variables.IVariableRegistry,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a delegate-based variable that calculates the sum of registered variables by their name.</summary>
            <param name="name">The name to be assigned to the variable.</param>
            <param name="variableRegistry">The variable registry containing the named variables to be aggregated.</param>
            <param name="variableNames">The names of the variables to be aggregated. This cannot be an empty collection.
            If null is provided then all variables within the registry will be aggregated.</param>
            <returns>The new variable instance.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IVariableLookup">
            <summary>Provides the ability to look up referenced and referencing variables for a specified variable.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableLookup.GetReferencedVariables(AllOverIt.Evaluator.Variables.IVariable,AllOverIt.Evaluator.Variables.VariableLookupMode)">
            <summary>Get all variables referenced by the specified variable using the specified lookup mode.</summary>
            <param name="variable">The source variable to look up referenced variables for.</param>
            <param name="lookupMode">Specifies the lookup mode that determines which variables will be returned.</param>
            <returns>All variables referenced by the specified variable.</returns>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableLookup.GetReferencingVariables(AllOverIt.Evaluator.Variables.IVariable,AllOverIt.Evaluator.Variables.VariableLookupMode)">
            <summary>Get all variables referencing the specified variable using the specified lookup mode.</summary>
            <param name="variable">The source variable to look up referencing variables for.</param>
            <param name="lookupMode">Specifies the lookup mode that determines which variables will be returned.</param>
            <returns>All variables referencing the specified variable.</returns>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.IVariableRegistry">
            <summary>Represents a registry of variables referenced by one or more formula.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableRegistry.AddVariable(AllOverIt.Evaluator.Variables.IVariable)">
            <summary>Adds a new variable to the registry.</summary>
            <param name="variable">The variable to add to the registry.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableRegistry.AddVariables(AllOverIt.Evaluator.Variables.IVariable[])">
            <summary>Adds one or more variables to the registry.</summary>
            <param name="variables">The variables to add to the registry.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableRegistry.SetValue(System.String,System.Double)">
            <summary>Sets the value of a variable based on its name.</summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.IVariableRegistry.Clear">
            <summary>Clears all variables from the registry.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.LazyVariable">
            <summary>A delegate based variable that is evaluated the first time the <see cref="P:AllOverIt.Evaluator.Variables.LazyVariable.Value"/> is read.</summary>
            <remarks>For a delegate based variable that is re-evaluated each time the <see cref="P:AllOverIt.Evaluator.Variables.LazyVariable.Value"/> is read,
            see <see cref="T:AllOverIt.Evaluator.Variables.DelegateVariable"/>.</remarks>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.LazyVariable.Value">
            <summary>The value of the variable. This value is evaluated the first time the value is read. Subsequent
            reads will return the same value.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.LazyVariable.#ctor(System.String,System.Func{System.Double},System.Boolean)">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="valueResolver">The delegate to invoke the first time <see cref="P:AllOverIt.Evaluator.Variables.LazyVariable.Value"/> is read.</param>
            <param name="threadSafe">Indicates if the underlying lazy-evaluator should evaluate in a thread safe ammner.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.LazyVariable.#ctor(System.String,AllOverIt.Evaluator.FormulaCompilerResult,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="compilerResult">The compiled result of a formula. The associated resolver will be evaluated
            the first time the <see cref="P:AllOverIt.Evaluator.Variables.LazyVariable.Value"/> is read.</param>
            <param name="threadSafe">Indicates if the underlying lazy-evaluator should evaluate in a thread safe ammner.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.LazyVariable.Reset">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.MutableVariable">
            <summary>A variable that can have its value changed.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.MutableVariable.Value">
            <summary>The current value of the variable.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.MutableVariable.#ctor(System.String,System.Double)">
            <summary>Constructor.</summary>
            <param name="name">The variable's name.</param>
            <param name="value">The variable's initial value.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.MutableVariable.SetValue(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.VariableBase">
            <summary>An abstract base class for a named variable.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.VariableBase.Name">
            <inheritdoc />
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.VariableBase.Value">
            <summary>Gets the variable's value.</summary>
        </member>
        <member name="P:AllOverIt.Evaluator.Variables.VariableBase.ReferencedVariables">
            <summary>Gets all variables this variable references. Only applicable to variables constructed from a FormulaCompilerResult.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableBase.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="name">The name of the ariable.</param>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.VariableFactory">
            <summary>A factory for creating variables.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateVariableRegistry">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateConstantVariable(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateMutableVariable(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateDelegateVariable(System.String,System.Func{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateLazyVariable(System.String,System.Func{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateAggregateVariable(System.String,System.Func{System.Double}[])">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableFactory.CreateAggregateVariable(System.String,AllOverIt.Evaluator.Variables.IVariableRegistry,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.VariableLookup">
            <summary>Provides the ability to lookup referenced and referencing variables from a variable registry.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableLookup.#ctor(AllOverIt.Evaluator.Variables.IVariableRegistry)">
            <summary>Constructor.</summary>
            <param name="variableRegistry">The variable registry used for lookup operations.</param>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableLookup.GetReferencedVariables(AllOverIt.Evaluator.Variables.IVariable,AllOverIt.Evaluator.Variables.VariableLookupMode)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableLookup.GetReferencingVariables(AllOverIt.Evaluator.Variables.IVariable,AllOverIt.Evaluator.Variables.VariableLookupMode)">
            <inheritdoc />
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.VariableLookupMode">
            <summary>Determines how variable lookup operations are performed.</summary>
        </member>
        <member name="F:AllOverIt.Evaluator.Variables.VariableLookupMode.Explicit">
            <summary>The lookup process should only return explicitly referenced or referencing variables.</summary>
        </member>
        <member name="F:AllOverIt.Evaluator.Variables.VariableLookupMode.All">
            <summary>The lookup process should return all (explicit and implicit) referenced or referencing variables.</summary>
        </member>
        <member name="T:AllOverIt.Evaluator.Variables.VariableRegistry">
            <summary>A registry of variables referenced by one or more formula.</summary>
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableRegistry.AddVariable(AllOverIt.Evaluator.Variables.IVariable)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableRegistry.AddVariables(AllOverIt.Evaluator.Variables.IVariable[])">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableRegistry.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableRegistry.SetValue(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:AllOverIt.Evaluator.Variables.VariableRegistry.Clear">
            <inheritdoc />
        </member>
    </members>
</doc>
