<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Modify Return Value" id="alloverit-aspects-modify-return-value">

    <p>
        Consider these methods on <code>ISecretService</code>:
    </p>

    <code-block lang="c#">
        string GetSecret(string accessKey);
        Task&lt;string&gt; GetSecretAsync(string accessKey);
    </code-block>

    <p>
        Imagine a scenario where you want to ensure the returned result is always lower-cased. This can be achieved by overriding the <code>AfterInvoke()</code> method, as shown in the class-level and method-level interceptor examples below.
    </p>

    <code-block lang="c#">
        // An example class-level interceptor that implements
        // InterceptorBase&lt;ISecretService&gt;.
        protected override void AfterInvoke(MethodInfo targetMethod,
            object[] args, InterceptorState state, ref object result)
        {
            var secret = (string) result;

            result = secret.ToLowerInvariant();
        }
    </code-block>

    <code-block lang="c#">
    // An example method-level interceptor that implements
    // InterceptorHandlerBase&lt;string&gt;.
    protected override string AfterInvoke(MethodInfo targetMethod,
        object[] args, InterceptorState state, string result)
    {
        var secret = (string) result;

        result = secret.ToLowerInvariant();
    }
    </code-block>

    <p>
        Below are some possible class-level and method-level interceptor implementations for <code>GetSecretAsync(string accessKey)</code>.
    </p>

    <code-block lang="c#">
        // An example class-level interceptor that implements
        // InterceptorBase&lt;ISecretService&gt;.
        protected override void AfterInvoke(MethodInfo targetMethod,
            object[] args, InterceptorState state, ref object result)
        {
            var secretTask = (Task&lt;string&gt;) result;

            // This is safe. The AfterInvoke() method will not be called
            // if the Task result is in a faulted state.
            var secret = secretTask.Result.ToLowerInvariant();

            // GetSecretAsync() returns a Task&lt;string&gt; so it must
            // be returned accordingly.
            result = Task.FromResult(secret);
        }
    </code-block>

    <code-block lang="c#">
        // An example method-level interceptor that implements
        // InterceptorHandlerBase&lt;string&gt;.
        protected override Task&lt;string&gt; AfterInvoke(MethodInfo targetMethod,
            object[] args, InterceptorState state, Task&lt;string&gt; result)
        {
            var secretTask = (Task&lt;string&gt;) result;

            // This is safe. The AfterInvoke() method will not be called
            // if the Task result is in a faulted state.
            var secret = secretTask.Result.ToLowerInvariant();

            // GetSecretAsync() returns a Task&lt;string&gt; so it must
            // be returned accordingly.
            return Task.FromResult(secret);
        }
    </code-block>

    <tip>
        The only difference between the two previous examples is the method signature.
    </tip>
</topic>