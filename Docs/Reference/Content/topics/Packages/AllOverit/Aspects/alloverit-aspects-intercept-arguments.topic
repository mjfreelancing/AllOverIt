<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Intercept Arguments" id="alloverit-aspects-intercept-arguments"
       help-id="alloverit-aspects-modify-input-arguments">

    <p>
        Consider this method on an intercepted service:
    </p>

    <code-block lang="c#">
        string GetSecret(string accessKey);
    </code-block>

    <p>
        Imagine a scenario where the service retrieves the secret from an external store where the access keys must be lower-cased, and you want to intercept this method to ensure the argument is modified before the external store is accessed. To achieve this, the argument can be modified as shown in the following class-level and method-level interceptor examples.
    </p>

    <tabs>
        <tab title="Class-level Interceptor">
            <code-block lang="c#">
                protected override InterceptorState BeforeInvoke(
                    MethodInfo targetMethod, object[] args)
                {
                    // The 'accessKey' passed to GetSecret() is at index 0
                    // (it is the first argument).
                    var accessKey = (string) args[0];

                    // This will mutate the argument before sending it to the
                    // decorated service.

                    // Note: The mutation is scoped to the service call. The argument
                    //       sent by the caller will remain unmodified.
                    args[0] = accessKey.ToLowerInvariant();

                    // Remainder of implementation here...
                }
            </code-block>

        </tab>

        <tab title="Method-level Handler">
            <code-block lang="c#">
                protected override InterceptorState&lt;string&gt; BeforeMethodInvoke(
                    MethodInfo targetMethod, object[] args)
                {
                    // The 'accessKey' passed to GetSecret() is at index 0
                    // (it is the first argument).
                    var accessKey = (string) args[0];

                    // This will mutate the argument before sending it to the
                    // decorated service.

                    // Note: The mutation is scoped to the service call. The argument
                    //       sent by the caller will remain unmodified.
                    args[0] = accessKey.ToLowerInvariant();

                    // Remainder of implementation here...
                }
            </code-block>
        </tab>
    </tabs>

    <tip>
        The only difference between the class-level and method-level interceptor examples is the method signature.
    </tip>

    <p>
        In both cases, the <code>accessKey</code> argument provided to <code>GetSecret()</code> will now be lower-cased before being sent to the decorated service instance.
    </p>
</topic>