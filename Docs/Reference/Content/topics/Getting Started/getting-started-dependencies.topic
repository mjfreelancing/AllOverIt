<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Dependencies" id="getting-started-dependencies">

    <p>
        <format style="bold">%aoi%</format>, the suite, contains a large number of packages, some of which are dependent on others within the suite. Understandably, this can make it difficult to keep track of which packages need to be explicitly included in your projects, and which can be <tooltip term="transitive">transitively</tooltip> (implicitly) included.
    </p>
    <p>
        The diagram below shows the package dependencies across the entire <format style="bold">%aoi%</format> suite:
    </p>

    <!--All generated versions are identical as there's no dependencies included, so just using the latest-->
    <img src="$WRS_MODULE$/images/dependencies/net8.0/alloverit-all.png" alt="AllOverIt Dependencies" />

    <chapter id="understanding-dependencies" title="Understanding Dependencies">
        <p>
            The diagram in the previous section shows a simplified view of package dependencies. The intention of this diagram is to assist with determining which packages need to be explicitly referenced in your projects, and which can be transitively (implicitly) referenced.
        </p>

        <p>
            To help explain this further, consider an application that explicitly adds <code>AllOverIt.EntityFrameworkCore.Pagination</code> to its' project using the Nuget Package Manager. The <code>csproj</code> file will be updated to contain a section similar to this:
        </p>

        <code-block lang="xml">
            <![CDATA[
                <ItemGroup>
                    <PackageReference
                        Include="AllOverIt.EntityFrameworkCore.Pagination"
                        Version="%aoi-version%" />
                </ItemGroup>
            ]]>
        </code-block>

        <p>
            You will notice there are no references to any of <code>AllOverIt.EntityFrameworkCore.Pagination</code>'s dependencies. This is because they will be transitively (implicitly) included.
        </p>

        <note>
            While you could explicitly include all related dependencies to the <code>csproj</code> file, it serves no benefit. In fact, if you're using the Nuget Package Manager to review and update your packages, then this can have a negative impact on performance since the interface will be looking for updates to <emphasis>every</emphasis> package you've explicitly included.
        </note>

    </chapter>

    <chapter id="explicit-references" title="Explicit references">
        <p>
            The example in the previous section describes how an application that explicitly references <code>AllOverIt.EntityFrameworkCore.Pagination</code> will transitively reference each of its' dependencies. Diagrammatically, this would like the following:
        </p>

        <code-block lang="mermaid">
            graph TB
            A[Application]
            B[AllOverIt.EntityFrameworkCore.Pagination]
            C[AllOverIt.Pagination]
            D[AllOverIt.Serialization.Binary]
            E[AllOverIt]
            F[AllOverIt.Assertion]
            A -- explicit --> B
            B .-> C
            C .-> D
            D .-> E
            E .-> F
            A -. transitive .-> C
            A -. transitive .-> D
            A -. transitive .-> E
            A -. transitive .-> F
        </code-block>

        <p>
            Let's now update the application to include an explicit reference to <code>AllOverIt.Reactive</code>. The <code>csproj</code> file would now contain:
        </p>

        <code-block lang="xml">
            <![CDATA[
                <ItemGroup>
                    <PackageReference
                        Include="AllOverIt.EntityFrameworkCore.Pagination"
                        Version="%aoi-version%" />
                    <PackageReference
                        Include="AllOverIt.Reactive"
                        Version="%aoi-version%" />
                </ItemGroup>
            ]]>
        </code-block>

        <p>
            And the application's dependencies would now look like the following:
        </p>

        <code-block lang="mermaid">
            graph TB
            A[Application]
            B[AllOverIt.EntityFrameworkCore.Pagination]
            C[AllOverIt.Pagination]
            D[AllOverIt.Serialization.Binary]
            E[AllOverIt]
            F[AllOverIt.Assertion]
            G[AllOverIt.Reactive]
            A -- explicit --> B
            A -- explicit --> G
            B .-> C
            C .-> D
            D .-> E
            E .-> F
            A -. transitive .-> C
            A -. transitive .-> D
            A -. transitive .-> E
            A -. transitive .-> F
            G .-> E
        </code-block>

        <p>
            As a final update, let's now add an explicit reference to <code>AllOverIt.Pipes</code>.
        </p>

        <code-block lang="xml">
            <![CDATA[
                <ItemGroup>
                    <PackageReference
                        Include="AllOverIt.EntityFrameworkCore.Pagination"
                        Version="%aoi-version%" />
                    <PackageReference
                        Include="AllOverIt.Reactive"
                        Version="%aoi-version%" />
                    <PackageReference
                        Include="AllOverIt.Pipes"
                        Version="%aoi-version%" />
                </ItemGroup>
            ]]>
        </code-block>

        <p>
            If you look back at the diagram showing all dependencies across <format style="bold">%aoi%</format> you will see that <code>AllOverIt.Pipes</code> has a dependency on <code>AllOverIt.Reactive</code>. This means it can be implicitly, rather than explicitly, referenced by the application so the <code>csproj</code> file can be simplified to the following:
        </p>

        <code-block lang="xml">
            <![CDATA[
                <ItemGroup>
                    <PackageReference
                        Include="AllOverIt.EntityFrameworkCore.Pagination"
                        Version="%aoi-version%" />
                    <PackageReference
                        Include="AllOverIt.Pipes"
                        Version="%aoi-version%" />
                </ItemGroup>
            ]]>
        </code-block>

        <p>
            And the application's dependencies would now look like the following:
        </p>

        <code-block lang="mermaid">
            graph TB
            A[Application]
            B[AllOverIt.EntityFrameworkCore.Pagination]
            C[AllOverIt.Pagination]
            D[AllOverIt.Serialization.Binary]
            E[AllOverIt]
            F[AllOverIt.Assertion]
            G[AllOverIt.Reactive]
            H[AllOverIt.Pipes]
            A -- explicit --> B
            A -- explicit --> H
            B .-> C
            C .-> D
            D .-> E
            E .-> F
            A -. transitive .-> C
            A -. transitive .-> D
            A -. transitive .-> E
            A -. transitive .-> F
            A -. transitive .-> G
            G .-> E
            H .-> G
        </code-block>
    </chapter>

    <chapter title="Package Dependencies" id="package-dependencies">
        <p>
            Each section within this documentation that describes an <format style="bold">%aoi%</format> package includes a dependency diagram that has been generated from the <format style="bold">%aoi%</format> solution. From the context of this solution, the diagram includes (where applicable):
        </p>

        <list type="bullet">
            <li>
                Explicit references to other <format style="bold">%aoi%</format> projects.
            </li>
            <li>
                Explicit references to Microsoft or third-party packages.
            </li>
            <li>
                Other transitive package references.
            </li>
        </list>

        <p>
            Consider the following diagram from the <code>AllOverIt.Validation.Options</code> package:
        </p>

        <img src="$WRS_MODULE$/images/dependencies/net8.0/alloverit-validation-options.png" alt="AllOverIt.Validation.Options" />

        <p>
            The purple-shaded box on the left contains the <format style="bold">%aoi%</format> packages that <code>AllOverIt.Validation.Options</code> has a dependency on.
        </p>

        <p>
            The blue-shaded items are explicit package references made by the correspondingly linked <format style="bold">%aoi%</format> package.
        </p>

        <p>
            The yellow-shaded items are the immediate transitive references made by the correspondingly linked explicit package reference. There could very well be more transitive references from these; the intent of these diagrams is to provide a high-level view of any additional dependencies required by the package in question.
        </p>

        <chapter title="The Take-Away" id="take-away">
            Using the above example, the take-away from this is that if a project explicitly references <code>AllOverIt.Validation.Options</code>, then every other package in that diagram is a transitive reference and therefore does not need to be included in that project's <code>csproj</code> file.
        </chapter>
    </chapter>
</topic>